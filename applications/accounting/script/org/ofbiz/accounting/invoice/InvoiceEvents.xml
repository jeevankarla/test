<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="createInvoiceItemPayrol" short-description="Create a new Invoice Item with Payrol Item Type">
        <entity-condition entity-name="InvoiceItemType" list="PayrolGroup">
            <condition-expr field-name="parentTypeId" value="PAYROL"/>
        </entity-condition>
        <entity-condition entity-name="InvoiceItemType" list="PayrolList"/>
        <iterate entry="payrolGroup" list="PayrolGroup">
            <iterate entry="payrolList" list="PayrolList">
                <if-compare field="payrolList.parentTypeId" value="${payrolGroup.invoiceItemTypeId}" operator="equals">
                    <set field="AddInvoiceItem" value="N"/>
                    <set field="createInvoiceItem.invoiceId" from-field="parameters.invoiceId"/>
                    <set field="createInvoiceItem.invoiceItemTypeId" from-field="payrolList.invoiceItemTypeId"/>
                    <set field="createInvoiceItem.description" value="${payrolGroup.description} : ${payrolList.description}"/>
                    <set field="createInvoiceItem.quantity" from-field="parameters.${payrolList.invoiceItemTypeId}_Quantity"/>
                    <if-not-empty field="parameters.${payrolList.invoiceItemTypeId}_Quantity">
                        <set field="AddInvoiceItem" value="Y"/>
                    </if-not-empty>
                    <set field="createInvoiceItem.amount" from-field="parameters.${payrolList.invoiceItemTypeId}_Amount"/>
                    <if-not-empty field="parameters.${payrolList.invoiceItemTypeId}_Amount">
                        <set field="AddInvoiceItem" value="Y"/>
                    </if-not-empty>
                    <if-compare field="AddInvoiceItem" value="Y" operator="equals">
                        <!-- negate amount if required -->
                        <if-compare field="payrolGroup.invoiceItemTypeId" value="PAYROL_EARN_HOURS" operator="not-equals">
                            <calculate field="createInvoiceItem.amount">
                                <calcop operator="multiply" field="createInvoiceItem.amount">
                                    <number value="-1"/>
                                </calcop>
                            </calculate>
                        </if-compare>
                        <call-service service-name="createInvoiceItem" in-map-name="createInvoiceItem"/>
                    </if-compare>
                </if-compare>
            </iterate>
        </iterate>
    </simple-method>


	<!--
		The key assumption being made here is that the deduction type id and benefit type ids match
		the invoice item ids.  Currently the db design cannot guarantee this referential integrity. 
 	-->
    <simple-method method-name="createInvoiceItemPayrolVSTOld" short-description="Create Invoice Items for Payroll">

    	<!-- Create invoice item for basic salary  -->
			<entity-one value-field="itemTypeLookup" entity-name="InvoiceItemType" auto-field-map="false">
				<field-map field-name="invoiceItemTypeId" value="PAYROL_BEN_SALARY"/>
			</entity-one>    	
        	<set field="createInvoiceItem.invoiceId" from-field="parameters.invoiceId"/>
            <set field="createInvoiceItem.invoiceItemTypeId" value="PAYROL_BEN_SALARY"/>
            <set field="createInvoiceItem.description" from-field="itemTypeLookup.description"/>
            <set field="createInvoiceItem.quantity" value="1"/>
            <set from-field="parameters.partyIdFrom" field="inputMap.partyId"/>
            <call-service service-name="fetchBasicSalary" in-map-name="inputMap">
            	<result-to-field result-name="amount" field="createInvoiceItem.amount"/>
            </call-service>                                  
            <call-service service-name="createInvoiceItem" in-map-name="createInvoiceItem"/>    	
    
    	<!-- Create benefit invoice items  -->
        <entity-condition entity-name="PartyBenefit" list="payrollBenefits">
            <condition-expr field-name="partyIdTo" value="${parameters.partyIdFrom}"/>
        </entity-condition>
<log level="info" message="======>createInvoiceItemPayrolVST::PartyBenefit.partyIdFrom=${parameters.partyIdFrom}"/>
        <iterate entry="payrollBenefit" list="payrollBenefits">
<log level="info" message="======>createInvoiceItemPayrolVST::PartyBenefit.benefitTypeId=${payrollBenefit.benefitTypeId}"/>        
			<entity-one value-field="itemTypeLookup" entity-name="InvoiceItemType" auto-field-map="false">
				<field-map field-name="invoiceItemTypeId" from-field="payrollBenefit.benefitTypeId"/>
			</entity-one>
        	<set field="createInvoiceItem.invoiceId" from-field="parameters.invoiceId"/>
            <set field="createInvoiceItem.invoiceItemTypeId" from-field="payrollBenefit.benefitTypeId"/>
            <set field="createInvoiceItem.description" from-field="itemTypeLookup.description"/>
            <set field="createInvoiceItem.quantity" value="1"/>
            <set field="createInvoiceItem.amount" from-field="payrollBenefit.cost" />                       
            <call-service service-name="createInvoiceItem" in-map-name="createInvoiceItem"/>
        </iterate>    	
    	
    	<!-- Create deduction invoice items  -->    	
        <entity-condition entity-name="PayrollPreference" list="payrollDeductions">
            <condition-expr field-name="partyId" value="${parameters.partyIdFrom}"/>
        </entity-condition>
<log level="info" message="======>createInvoiceItemPayrolVST::PayrollPreference.partyIdFrom=${parameters.partyIdFrom}"/>
        <iterate entry="payrollDeduction" list="payrollDeductions">
<log level="info" message="======>createInvoiceItemPayrolVST::PayrollPreference.deductionTypeId=${payrollDeduction.deductionTypeId}"/>        
			<entity-one value-field="itemTypeLookup" entity-name="InvoiceItemType" auto-field-map="false">
				<field-map field-name="invoiceItemTypeId" from-field="payrollDeduction.deductionTypeId"/>
			</entity-one>
        	<set field="createInvoiceItem.invoiceId" from-field="parameters.invoiceId"/>
            <set field="createInvoiceItem.invoiceItemTypeId" from-field="payrollDeduction.deductionTypeId"/>
            <set field="createInvoiceItem.description" from-field="itemTypeLookup.description"/>
            <set field="createInvoiceItem.quantity" value="1"/>
            <set field="createInvoiceItem.amount" from-field="payrollDeduction.flatAmount"/>    
            <calculate field="createInvoiceItem.amount">
             	<calcop operator="multiply" field="createInvoiceItem.amount">
                 	<number value="-1"/>
                 </calcop>
             </calculate>                               
            <call-service service-name="createInvoiceItem" in-map-name="createInvoiceItem"/>
        </iterate>
    </simple-method>

</simple-methods>
