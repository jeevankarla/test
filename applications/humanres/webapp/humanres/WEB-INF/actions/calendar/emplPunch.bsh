/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.util.*;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.EntityOperator;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import org.ofbiz.entity.GenericDelegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.base.util.Debug;


partyId = context.get("partyId");
String check=null;
punchdate = context.get("punchdate");
if(punchdate != null){
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
punchdate = dateFormat.parse(punchdate);
punchdate=new java.sql.Date(punchdate.getDate());
}
punchType = "Normal"; //context.get("PunchType");
if (parameters.get("partyId") != null) 
{
userLogin = request.getAttribute("userLogin");
}
exprList = UtilMisc.toList(
    EntityCondition.makeCondition("partyId", EntityOperator.EQUALS, partyId),
    EntityCondition.makeCondition("punchdate", EntityOperator.EQUALS, punchdate),
    EntityCondition.makeCondition("PunchType", EntityOperator.EQUALS, punchType));
    condition = EntityCondition.makeCondition(exprList, EntityOperator.AND);
tasks = delegator.findList("EmplPunch", condition, null, null, null, false);
val=tasks.size();

context.put("check",check);


