<?xml version="1.0" encoding="UTF-8"?>
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
  
  	<simple-method method-name="createContentDocument"
        short-description="Create Quote Content" login-required="false">
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="dataResourceName"/>
        </call-class-method>
        <!-- Check input parameters -->
        <if>
            <condition>
                <and>
                    <if-empty field="formInput.formInput.contentId"/>
                    <if-empty field="formInput.imageFileName"/>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="ContentUiLabels" property="ContentContentIdOrUploadFileIsMissing"/>
                </add-error>
            </then>
        </if>
        <check-errors/>
        <!-- Create new content form upload file / set content from Existing content -->
        <if-empty field="formInput.formInput.contentId">
                <if>
                    <condition>
                        <or>
                            <!-- Compare MimeType between upload file and selected MimeType -->
                            <if-compare-field field="formInput.uploadMimeType" operator="equals" to-field="formInput.formInput.mimeTypeId"/>
                            <if-compare field="formInput.formInput.mimeTypeId" operator="equals"  value="application/octet-stream"/>
                            <if-compare field="formInput.formInput.mimeTypeId" operator="equals"  value=""/>
                        </or>
                    </condition>
                    <then>
                        <!-- Create new content from upload file -->
                        <set-service-fields service-name="createContentFromUploadedFile"
                            map="formInput.formInput" to-map="inMap"/>
                        <set field="inMap._uploadedFile_fileName" from-field="formInput.imageFileName"/>
                        <set field="inMap.uploadedFile" from-field="formInput.imageData"/>
                        <set field="inMap._uploadedFile_contentType" from-field="formInput.uploadMimeType"/>
                        <call-service service-name="createContentFromUploadedFile" in-map-name="inMap">
                            <result-to-field result-name="contentId" field="context.contentId"/>
                        </call-service>
                    </then>
                    <else>
                        <add-error>
                            <fail-property resource="ContentUiLabels" property="ContentUploadFileTypeNotMatch"/>
                        </add-error>
                    </else>
                </if>
                <check-errors/>
            <else>
                <!--set content from Existing content-->
                <set field="context.contentId" from-field="formInput.formInput.contentId"/>
            </else>
        </if-empty>
        
        <!-- create ContentAssoc-->
        <set-service-fields service-name="createContentAssoc" map="formInput.formInput" to-map="contentMap"/>
        <if-not-empty field="formInput.formInput.contentIdFrom">
            <set field="contentMap.contentAssocTypeId" value="SUB_CONTENT"/>
            <set field="contentMap.contentIdFrom" from-field="formInput.formInput.contentIdFrom"/>
            <set field="contentMap.contentId" from-field="formInput.formInput.contentIdFrom"/>
            <set field="contentMap.contentIdTo" from-field="context.contentId"/>
            <now-timestamp field="contentMap.fromDate"/>
            <entity-and entity-name="ContentAssoc" list="contentAssoList">
                <field-map field-name="contentId" from-field="contentMap.contentId"/>
                <field-map field-name="contentIdTo" from-field="contentMap.contentIdTo"/>
            </entity-and>
            <if-empty field="contentAssonList">
                <call-service service-name="createContentAssoc" in-map-name="contentMap"/>           
            </if-empty>
        </if-not-empty>
        <set field="context.quoteId" from-field="formInput.formInput.quoteId"/>
        <set field="context.quoteItemSeqId" from-field="formInput.formInput.quoteItemSeqId"/>
        <set field="context.fromDate" value="${groovy:org.ofbiz.base.util.UtilDateTime.getDayStart(org.ofbiz.base.util.UtilDateTime.nowTimestamp())}" type="Timestamp"/>
        <log level="always" message="date is ${context.fromdate} " ></log>
        <call-map-processor in-map-name="context" out-map-name="bidContext">
            <simple-map-processor name="bidContent">
                <process field="contentId">
                    <copy to-field="contentId"/>
                </process>
                    <process field="quoteItemSeqId">
                    <copy to-field="quoteItemSeqId"/>
                </process>
                <process field="quoteId">
                    <copy to-field="quoteId"/>
                </process>
                <process field="fromDate">
                    <copy to-field="fromDate"/>
                </process>
            </simple-map-processor>
        </call-map-processor>

        <call-service service-name="createQuoteContent" in-map-name="bidContext">
            <result-to-field result-name="contentId" field="contentId"/>
        </call-service>
        
    </simple-method>
    
    <simple-method method-name="createQuoteContent" short-description="Create Quote Content">
        <make-value entity-name="QuoteContent" value-field="newEntity"/>
        <set field="newEntity.contentId" value="${parameters.contentId}"/>
        <set field="newEntity.quoteId" value="${parameters.quoteId}"/>
        <set field="newEntity.quoteItemSeqId" value="${parameters.quoteItemSeqId}"/>
        <set field="newEntity.fromDate" value="${parameters.fromDate}" type="Timestamp"/>
        <if-empty field="newEntity.fromDate">
            <now-timestamp field="nowTimestamp"/>
            <set field="newEntity.fromDate" from-field="nowTimestamp"/>
        </if-empty>
        <create-value value-field="newEntity"/>
        <field-to-result field="newEntity.contentId" result-name="contentId"/>
        <field-to-result field="newEntity.quoteId" result-name="quoteId"/>
        <field-to-result field="newEntity.quoteItemSeqId" result-name="quoteItemSeqId"/>
    </simple-method>
	    
    <simple-method method-name="deleteQuoteContent" short-description="Remove a Quote Content">
        <entity-one entity-name="QuoteContent" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <if-empty field="lookedUpValue.thruDate">
            <now-timestamp field="lookedUpValue.thruDate"/>
        </if-empty>
        <store-value value-field="lookedUpValue"/>
         <field-to-result field="lookedUpValue.quoteId" result-name="quoteId"/>
        <field-to-result field="lookedUpValue.quoteItemSeqId" result-name="quoteItemSeqId"/>
        <!-- <call-simple-method method-name="updateQuoteItemLastModifiedDate"/>
       <log level="always" message="quoteItemSeq look ${lookedUpValue.quoteId} ${lookedUpValue.quoteItemSeqId} param ${parameters.quoteId} ${parameters.quoteItemSeqId}"></log> -->
    </simple-method>
    
    <simple-method method-name="createPOContent" short-description="Create Order Content Entity">
        <make-value value-field="orderContent" entity-name="OrderContent"/>
        <set-pk-fields value-field="orderContent" map="parameters"/>
        <set-nonpk-fields value-field="orderContent" map="parameters"/>

        <if-empty field="orderContent.fromDate">
            <now-timestamp field="nowTimestamp"/>
            <set field="orderContent.fromDate" from-field="nowTimestamp"/>
        </if-empty>
        <if-empty field="parameters.orderItemSeqId">
                <make-next-seq-id value-field="orderContent" seq-field-name="orderItemSeqId" />
        </if-empty>

        <create-value value-field="orderContent"/>
    </simple-method>
    
    <simple-method method-name="removePOcontent" short-description="Remove Order Content Entity">
        <make-value value-field="lookupPkMap" entity-name="OrderContent"/>
        <set-pk-fields value-field="lookupPkMap" map="parameters"/>

        <find-by-primary-key map="lookupPkMap" value-field="orderContent"/>
        <remove-value value-field="orderContent"/>
    </simple-method>
    
    <simple-method method-name="createRequestContentDocument"
        short-description="Create Cust Request Content" login-required="false">
        <call-class-method class-name="org.ofbiz.content.layout.LayoutWorker"
            method-name="uploadImageAndParameters" ret-field="formInput">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <string value="dataResourceName"/>
        </call-class-method>
        <!-- Check input parameters -->
        <if>
            <condition>
                <and>
                    <if-empty field="formInput.formInput.contentId"/>
                    <if-empty field="formInput.imageFileName"/>
                </and>
            </condition>
            <then>
                <add-error>
                    <fail-property resource="ContentUiLabels" property="ContentContentIdOrUploadFileIsMissing"/>
                </add-error>
            </then>
        </if>
        <check-errors/>
        <!-- Create new content form upload file / set content from Existing content -->
        <if-empty field="formInput.formInput.contentId">
                <if>
                    <condition>
                        <or>
                            <!-- Compare MimeType between upload file and selected MimeType -->
                            <if-compare-field field="formInput.uploadMimeType" operator="equals" to-field="formInput.formInput.mimeTypeId"/>
                            <if-compare field="formInput.formInput.mimeTypeId" operator="equals"  value="application/octet-stream"/>
                            <if-compare field="formInput.formInput.mimeTypeId" operator="equals"  value=""/>
                        </or>
                    </condition>
                    <then>
                        <!-- Create new content from upload file -->
                        <set-service-fields service-name="createContentFromUploadedFile"
                            map="formInput.formInput" to-map="inMap"/>
                        <set field="inMap._uploadedFile_fileName" from-field="formInput.imageFileName"/>
                        <set field="inMap.uploadedFile" from-field="formInput.imageData"/>
                        <set field="inMap._uploadedFile_contentType" from-field="formInput.uploadMimeType"/>
                        <call-service service-name="createContentFromUploadedFile" in-map-name="inMap">
                            <result-to-field result-name="contentId" field="context.contentId"/>
                        </call-service>
                    </then>
                    <else>
                        <add-error>
                            <fail-property resource="ContentUiLabels" property="ContentUploadFileTypeNotMatch"/>
                        </add-error>
                    </else>
                </if>
                <check-errors/>
            <else>
                <!--set content from Existing content-->
                <set field="context.contentId" from-field="formInput.formInput.contentId"/>
            </else>
        </if-empty>
        
        <!-- create ContentAssoc-->
        <set-service-fields service-name="createContentAssoc" map="formInput.formInput" to-map="contentMap"/>
        <if-not-empty field="formInput.formInput.contentIdFrom">
            <set field="contentMap.contentAssocTypeId" value="SUB_CONTENT"/>
            <set field="contentMap.contentIdFrom" from-field="formInput.formInput.contentIdFrom"/>
            <set field="contentMap.contentId" from-field="formInput.formInput.contentIdFrom"/>
            <set field="contentMap.contentIdTo" from-field="context.contentId"/>
            <now-timestamp field="contentMap.fromDate"/>
            <entity-and entity-name="ContentAssoc" list="contentAssoList">
                <field-map field-name="contentId" from-field="contentMap.contentId"/>
                <field-map field-name="contentIdTo" from-field="contentMap.contentIdTo"/>
            </entity-and>
            <if-empty field="contentAssonList">
                <call-service service-name="createContentAssoc" in-map-name="contentMap"/>           
            </if-empty>
        </if-not-empty>
        <set field="context.custRequestId" from-field="formInput.formInput.custRequestId"/>
        <set field="context.fromDate" value="${groovy:org.ofbiz.base.util.UtilDateTime.getDayStart(org.ofbiz.base.util.UtilDateTime.nowTimestamp())}" type="Timestamp"/>
        <log level="always" message="date is ${context.fromdate} " ></log>
        <call-map-processor in-map-name="context" out-map-name="custRequestContext">
            <simple-map-processor name="custRequestContext">
                <process field="contentId">
                    <copy to-field="contentId"/>
                </process>
                <process field="custRequestId">
                    <copy to-field="custRequestId"/>
                </process>
                <process field="fromDate">
                    <copy to-field="fromDate"/>
                </process>
            </simple-map-processor>
        </call-map-processor>
        <call-service service-name="createCustRequestContent" in-map-name="custRequestContext">
            <result-to-field result-name="contentId" field="contentId"/>
        </call-service>
        
    </simple-method>
 	<simple-method method-name="createOrderAttribute" short-description="Create Order Attribute">
        <make-value entity-name="OrderAttribute" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <entity-one entity-name="OrderAttribute" value-field="orderAttribute" auto-field-map="true"/>
        <if>
            <condition>
                <and>
                   <if-compare-field field="orderAttribute.orderId" to-field="parameters.orderId" operator="equals"/>
                   <if-compare-field field="orderAttribute.attrName" to-field="parameters.attrName" operator="equals"/>
                </and>
            </condition>
            <then>
                 <add-error>
                    <fail-message message="Record with the selected combination already exists.Please try with Other combination."/>
                 </add-error>
                 <check-errors/>
            </then>
            <else>
                <create-value value-field="newEntity"/>
                <set field="responseMessage" value="Order Attribute Added successfully."/>
        		<field-to-result field="responseMessage" result-name="successMessage"/>
            </else>
        </if>
    </simple-method>  
    <simple-method method-name="DeleteOrderAttribute" short-description="Delete Order Attribute">
    	<entity-one entity-name="OrderAttribute" value-field="orderAttribute"/>
        <remove-value value-field="orderAttribute"/>
    </simple-method> 
    
    <simple-method method-name="deleteOrderAssoc" short-description="Delete Order Association">
    	<entity-one entity-name="OrderAssoc" value-field="orderAssoc"/>
        <remove-value value-field="orderAssoc"/>
    </simple-method> 
    
    <simple-method method-name="sendEquiryPerEmail" short-description="Send an invoice per Email">
      <if-empty field="parameters.sendFrom">
           <set field="parameters.sendFrom" value="${bsh:org.ofbiz.base.util.UtilProperties.getPropertyValue(&quot;general.properties&quot;, &quot;defaultFromEmailAddress&quot;);}"/>
      </if-empty>
        <set-service-fields service-name="sendMailFromScreen" map="parameters" to-map="emailParams"/>
        <set field="emailParams.xslfoAttachScreenLocation" value="component://materialmgmt/widget/materialmgmtReportScreens.xml#MaterialEnquiryReport"/>
        <set field="emailParams.bodyParameters.custRequestId" from-field="parameters.custRequestId"/>
         <set field="emailParams.bodyParameters.partyId" from-field="parameters.partyId"/>
        <set field="emailParams.bodyParameters.userLogin" from-field="parameters.userLogin"/>
        <call-service-asynch service-name="sendMailFromScreen" in-map-name="emailParams"/>
        <set field="successMessage" value="Enquiry Email Scheduled ToSend :${parameters.sendTo}"/>
    </simple-method>
    
    <simple-method method-name="sendIndentIssuanceEmail" short-description="Send an indent issuance per Email">
      <if-empty field="parameters.sendFrom">
           <set field="parameters.sendFrom" value="${bsh:org.ofbiz.base.util.UtilProperties.getPropertyValue(&quot;general.properties&quot;, &quot;defaultFromEmailAddress&quot;);}"/>
      </if-empty>
        <set-service-fields service-name="sendMailFromScreen" map="parameters" to-map="emailParams"/>
        <set field="emailParams.xslfoAttachScreenLocation" value="component://materialmgmt/widget/materialmgmtReportScreens.xml#MaterialIndentReport"/>
        <set field="emailParams.bodyParameters.IndentNo" from-field="parameters.custRequestId"/>
         <set field="emailParams.bodyParameters.partyId" from-field="parameters.partyId"/>
        <set field="emailParams.bodyParameters.userLogin" from-field="parameters.userLogin"/>
        <call-service-asynch service-name="sendMailFromScreen" in-map-name="emailParams"/>
        <set field="successMessage" value="Enquiry Email Scheduled ToSend :${parameters.sendTo}"/>
    </simple-method>
    
</simple-methods>   
