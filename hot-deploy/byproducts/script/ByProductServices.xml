<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the 
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
        
   <simple-method method-name="createInvoiceAndSettlePayments" short-description="Create Invoice for ShipmentId and Run Settle Payments against invoices">
        <set field="inMap.shipmentId" from-field="parameters.shipmentId"/>
        <call-service service-name="createInvoicesFromShipment" in-map-name="inMap">
        	<result-to-field result-name="invoicesCreated" field="invoiceIds" />
        </call-service>
		<first-from-list entry="invoiceId" list="invoiceIds"/>
		<set field="invoiceCtx.invoiceId" from-field="invoiceId"/>
		<set field="invoiceCtx.statusId" value="INVOICE_READY"/>
		<call-service service-name="setInvoiceStatus" in-map-name="invoiceCtx"></call-service>
		<check-errors/>
		<set field="inputMap.invoiceId" from-field="invoiceId"/>
		<call-service service-name="settleInvoiceAndPayments" in-map-name="inputMap"/>
    </simple-method>
	<simple-method method-name="findCreateIssueShipmentItem" short-description="Find or Create ShipmentItem to Issue To - meant to be called in-line">
        <!-- try to find an existing shipmentItem and attach to it, if none found create a new shipmentItem -->
        <!-- if there is NO productId on the orderItem, ALWAYS create a new shipmentItem -->
        <if-not-empty field="orderItem.productId">
            <entity-condition entity-name="ShipmentItem" list="shipmentItems">
                <condition-list combine="and">
                    <condition-expr field-name="productId" from-field="orderItem.productId"/>
                    <condition-expr field-name="shipmentId" from-field="parameters.shipmentId"/>
                    <condition-expr field-name="shipmentItemSeqId" from-field="parameters.shipmentItemSeqId" ignore-if-empty="true"/>
                </condition-list>
                <order-by field-name="shipmentItemSeqId"/>
            </entity-condition>
            <first-from-list entry="shipmentItem" list="shipmentItems"/>
        </if-not-empty>

        <if-empty field="shipmentItem">
            <set from-field="orderItem.productId" field="shipmentItemCreate.productId"/>
            <set from-field="parameters.shipmentId" field="shipmentItemCreate.shipmentId"/>
            <set from-field="parameters.quantity" field="shipmentItemCreate.quantity"/>
            <call-service service-name="createShipmentItem" in-map-name="shipmentItemCreate">
                <result-to-field result-name="shipmentItemSeqId" field="shipmentItemLookupPk.shipmentItemSeqId"/>
            </call-service>
            <set from-field="parameters.shipmentId" field="shipmentItemLookupPk.shipmentId"/>
            <find-by-primary-key entity-name="ShipmentItem" map="shipmentItemLookupPk" value-field="shipmentItem"/>
        <else>
            <calculate field="shipmentItem.quantity">
                <calcop operator="get" field="shipmentItem.quantity"/>
                <calcop operator="get" field="parameters.quantity"/>
            </calculate>
            <store-value value-field="shipmentItem"/>
        </else>
        </if-empty>
        <set from-field="parameters.shipmentId" field="orderShipmentCreate.shipmentId"/>
        <set from-field="shipmentItem.shipmentItemSeqId" field="orderShipmentCreate.shipmentItemSeqId"/>
        <set from-field="orderItem.orderId" field="orderShipmentCreate.orderId"/>
        <set from-field="orderItem.orderItemSeqId" field="orderShipmentCreate.orderItemSeqId"/>
        <if-not-empty field="orderItemShipGroupAssoc">
            <set from-field="orderItemShipGroupAssoc.shipGroupSeqId" field="orderShipmentCreate.shipGroupSeqId"/>
        </if-not-empty>
        <if-not-empty field="orderItemShipGrpInvRes">
            <set from-field="orderItemShipGrpInvRes.shipGroupSeqId" field="orderShipmentCreate.shipGroupSeqId"/>
        </if-not-empty>
        <set from-field="parameters.quantity" field="orderShipmentCreate.quantity"/>
        <call-service service-name="createOrderShipment" in-map-name="orderShipmentCreate"/>

        <field-to-result field="shipmentItem.shipmentItemSeqId" result-name="shipmentItemSeqId"/>
    </simple-method>
	<simple-method method-name="findCreateItemIssuance" short-description="Find Create ItemIssuance - meant to be called in-line">
        <!-- If a non-sales order find ItemIssuance for orderItemSeqId-shimentItemSeqId-shipGroupSeqId pair, update it and return -->
        <if-compare field="orderHeader.orderTypeId" operator="not-equals" value="SALES_ORDER">
            <entity-and list="itemIssuances" entity-name="ItemIssuance">
                <field-map field-name="orderId" from-field="orderItem.orderId"/>
                <field-map field-name="orderItemSeqId" from-field="orderItem.orderItemSeqId"/>
                <field-map field-name="shipmentId" from-field="shipmentItem.shipmentId"/>
                <field-map field-name="shipmentItemSeqId" from-field="shipmentItem.shipmentItemSeqId"/>
                <field-map field-name="shipGroupSeqId" from-field="orderItemShipGroupAssoc.shipGroupSeqId"/>
                <order-by field-name="-issuedDateTime"/>
            </entity-and>
            <if-not-empty field="itemIssuances">
                <first-from-list entry="itemIssuance" list="itemIssuances"/>
                <set field="itemIssuance.quantity" value="${itemIssuance.quantity$bigDecimal + parameters.quantity$bigDecimal}" type="BigDecimal"/>
                <store-value value-field="itemIssuance"/>
                <set field="itemIssuanceId" from-field="itemIssuance.itemIssuanceId"/>
                <field-to-result field="itemIssuanceId"/>
                <return/>
            </if-not-empty>
        </if-compare>
        
        <!-- create the ItemIssuance -->
        <set from-field="parameters.quantity" field="itemIssuanceCreate.quantity"/>
        <set from-field="shipmentItem.shipmentId" field="itemIssuanceCreate.shipmentId"/>
        <set from-field="shipmentItem.shipmentItemSeqId" field="itemIssuanceCreate.shipmentItemSeqId"/>
        <set from-field="orderItem.orderId" field="itemIssuanceCreate.orderId"/>
        <set from-field="orderItem.orderItemSeqId" field="itemIssuanceCreate.orderItemSeqId"/>
        <set from-field="eventDate" field="itemIssuanceCreate.issuedDateTime"/>

        <if-not-empty field="orderItemShipGrpInvRes">
            <!-- if this is coming from an OrderItem issue instead of an OrderItemShipGrpInvRes issue, we won't have this info -->
            <set from-field="orderItemShipGrpInvRes.inventoryItemId" field="itemIssuanceCreate.inventoryItemId"/>
            <set from-field="orderItemShipGrpInvRes.shipGroupSeqId" field="itemIssuanceCreate.shipGroupSeqId"/>
        </if-not-empty>
        <if-not-empty field="orderItemShipGroupAssoc">
            <!-- If we have a ShipGroup Assoc for this Item to focus on, set that; this is mostly the case for purchase orders and such -->
            <set from-field="orderItemShipGroupAssoc.shipGroupSeqId" field="itemIssuanceCreate.shipGroupSeqId"/>
        </if-not-empty>

        <set from-field="userLogin.userLoginId" field="itemIssuanceCreate.issuedByUserLoginId"/>
        <call-service service-name="createItemIssuance" in-map-name="itemIssuanceCreate">
            <result-to-field result-name="itemIssuanceId"/>
        </call-service>
        <field-to-result field="itemIssuanceId"/>
    </simple-method>
    <simple-method method-name="associateIssueRoles" short-description="Associate Roles for ItemIssuance - meant to be called in-line">
        <!-- make sure the party is in the PACKER role -->
        <make-value entity-name="PartyRole" value-field="partyRole"/>
        <set field="partyRole.partyId" from-field="userLogin.partyId"/>
        <set field="partyRole.roleTypeId" value="PACKER"/>
        <find-by-primary-key entity-name="PartyRole" map="partyRole" value-field="checkPartyRole"/>
        <if-empty field="checkPartyRole">
            <create-value value-field="partyRole"/>
        </if-empty>

        <!-- Add ItemIssuanceRole for party that issues this... -->
        <entity-one value-field="itemIssuanceRole" entity-name="ItemIssuanceRole">
            <field-map field-name="itemIssuanceId" from-field="itemIssuanceId"/>
            <field-map field-name="partyId" from-field="userLogin.partyId"/>
            <field-map field-name="roleTypeId" value="PACKER"/>
        </entity-one>
        <if-empty field="itemIssuanceRole">
            <set from-field="itemIssuanceId" field="itemIssuanceRoleCreate.itemIssuanceId"/>
            <set from-field="userLogin.partyId" field="itemIssuanceRoleCreate.partyId"/>
            <set value="PACKER" field="itemIssuanceRoleCreate.roleTypeId"/>
            <call-service service-name="createItemIssuanceRole" in-map-name="itemIssuanceRoleCreate"/>
        </if-empty>
    </simple-method>
    <simple-method method-name="createCustRequest" short-description="Create Customer Request">
        <make-value value-field="newEntity" entity-name="CustRequest"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <now-timestamp field="newEntity.lastModifiedDate"/>

        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="newEntity.lastModifiedDate"/>
        <set from-field="nowTimestamp" field="newEntity.createdDate"/>
        <set from-field="userLogin.userLoginId" field="newEntity.lastModifiedByUserLogin"/>
        <set from-field="userLogin.userLoginId" field="newEntity.createdByUserLogin"/>

        <if-empty field="parameters.custRequestDate">
            <set field="newEntity.custRequestDate" from-field="nowTimestamp"/>
        </if-empty>

        <!-- always start with draft -->
        <set value="CRQ_SUBMITTED" field="newEntity.statusId"/>
        <set field="newEntity.custRequestTypeId" value="STOCK_XFER_REQUEST"/>
        
        <if-not-empty field="parameters.custRequestId">
            <set field="newEntity.custRequestId" from-field="parameters.custRequestId"/>
            <else>
                <sequenced-id sequence-name="CustRequest" field="newEntity.custRequestId"/>
            </else>
        </if-not-empty>
        <if-not-empty field="parameters.custRequestTypeId">
            <set field="newEntity.custRequestTypeId" from-field="parameters.custRequestTypeId"/>
        </if-not-empty>

        <create-value value-field="newEntity"/>
        <field-to-result field="newEntity.custRequestId" result-name="custRequestId"/>

        <!-- set status fields and history if provided -->
        <if-not-empty field="parameters.statusId">
            <set field="setStat.statusId" from-field="parameters.statusId"/>
            <set field="setStat.custRequestId" from-field="newEntity.custRequestId"/>
            <if-not-empty field="parameters.webSiteId">
                <set field="setStat.webSiteId" from-field="parameters.webSiteId"/>
            </if-not-empty>
            <call-service service-name="setCustRequestStatus" in-map-name="setStat"/>
        </if-not-empty>
        
        <!-- create also the item if key fields are provided -->
        <if>
            <condition>
                <or>
                    <not><if-empty field="parameters.productId"/></not>
                    <not><if-empty field="parameters.reservStart"/></not>
                    <not><if-empty field="parameters.story"/></not>
                    <not><if-empty field="parameters.description"/></not>
                </or>
            </condition>
            <then>
                <set-service-fields service-name="createCustRequestItem" map="parameters" to-map="createItem"/>
                <set field="createItem.custRequestId" from-field="newEntity.custRequestId"/>
                <call-service service-name="createCustRequestItem" in-map-name="createItem"/>
            </then>
        </if>
    </simple-method>
    
    <simple-method method-name="createCustRequestStatus" short-description="Create Customer Request Status">
        <make-value value-field="newEntity" entity-name="CustRequestStatus"/>
        <sequenced-id sequence-name="CustRequestStatus" field="newEntity.custRequestStatusId"/>
        <log level="always" message="custRequeststatusId:${newEntity.custRequestStatusId}"></log>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <if-empty field="newEntity.statusDatetime">
            <now-timestamp field="nowTimestamp"/>
            <set from-field="nowTimestamp" field="newEntity.statusDatetime"/>
        </if-empty>
        <set field="newEntity.statusUserLogin" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>       
</simple-methods> 